var documenterSearchIndex = {"docs":
[{"title":"PkgCacheInspector","page":"Home","location":"#PkgCacheInspector","category":"section","text":""},{"title":"Home","page":"Home","location":"","category":"page","text":"Documentation for PkgCacheInspector."},{"title":"Home","page":"Home","location":"","category":"page","text":"tip: Tip\nSee the README for a usage demo."},{"title":"Home","page":"Home","location":"","category":"page","text":"This documentation provides reference information which may be useful for understanding more about the information returned by info_cachefile."},{"title":"Home","page":"Home","location":"","category":"page","text":""},{"title":"PkgCacheInspector.info_cachefile","page":"Home","location":"#PkgCacheInspector.info_cachefile","category":"function","text":"info_cachefile(pkgname::AbstractString) → cf\ninfo_cachefile(pkgid::Base.PkgId) → cf\ninfo_cachefile(pkgid::Base.PkgId, ji_cachefilename) → cf\n\nReturn a snapshot cf of a package cache file. Displaying cf prints a summary of the contents, but the fields of cf can be inspected to get further information (see PkgCacheInfo).\n\nAfter calling info_cachefile(\"MyPkg\") you can also execute using MyPkg to make the image loaded by info_cachefile available for use. This can allow you to load cfs for multiple packages into the same session for deeper analysis.\n\nwarn: Warn\nYour session may be corrupted if you run info_cachefile for a package that had already been loaded into your session. Restarting with a clean session and using info_cachefile before otherwise loading the package is recommended.\n\n\n\n\n\n"},{"title":"PkgCacheInspector.PkgCacheInfo","page":"Home","location":"#PkgCacheInspector.PkgCacheInfo","category":"type","text":"struct PkgCacheInfo\n\nObjects stored the pkgimage. The main contents are the modules themselves, but some additional objects are stored external to the modules. It also contains the data used to perform invalidation-checks.\n\ncachefile: The filename of the cache.\n\nmodules: The list of modules stored in the package image. The final one is the \"top\" package module.\n\ninit_order: The list of modules with an __init__ function, in the order in which they should be called.\n\nexternal_methods: The list of methods added to external modules. E.g., Base.push!(v::MyNewVector, x).\n\nnew_specializations: The list of novel specializations of external methods that were created during package precompilation. E.g., get(::Dict{String,Float16}, ::String, ::Nothing): Base owns the method and all the types in this specialization, but might not have precompiled it until it was needed by a package.\n\nnew_method_roots: New GC roots added to external methods. These are an important but internal detail of how type-inferred code is compressed for serialization.\n\nedges: A lookup table of external_targets dependencies: [mi1, indxs1, mi2, indxs2...] means that mi1 (cached in this pkgimage) depends on external_targets[idxs1]; mi2 depends on external_targets[idxs2], and so on.\n\nfilesize: The total size of the cache file.\n\ncachesizes: Sizes of the individual sections. See PkgCacheSizes.\n\nimage_targets: The image targets that were cloned into the pkgimage, if used.\n\n\n\n\n\n"},{"title":"PkgCacheInspector.PkgCacheSizes","page":"Home","location":"#PkgCacheInspector.PkgCacheSizes","category":"type","text":"struct PkgCacheSizes\n\nStores the sizes of different \"sections\" of the pkgimage. The main section is the package image itself. However, reconstructing a pkgimage for use requires auxillary data, like the addresses of internal pointers that need to be modified to account for the actual base address into which the pkgimage was loaded. Each form of auxillary data gets stored in distinct sections.\n\nsysdata: Size of the image. This is the portion of the file that gets returns by info_cachefile.\n\nisbitsdata: Size of the const internal data section (storing things not visible from Julia, like datatype layouts).\n\nsymboldata: Size of the symbol section, for Symbols stored in the image.\n\ntagslist: Size of the GC tags section, holding references to objects that require special re-initialization for GC.\n\nreloclist: Size of the relocation-list section, holding references to within-image pointers that need to be offset by the actual base pointer upon reloading.\n\ngvarlist: Size of the \"gvar\" (global variable) list of LLVM-encoded objects.\n\nfptrlist: Size of the function-pointer list, referencing native code.\n\n\n\n\n\n"}]
}
